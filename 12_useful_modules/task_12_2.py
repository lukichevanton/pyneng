# -*- coding: utf-8 -*-
'''
Задание 12.2


Функция ping_ip_addresses из задания 12.1 принимает только список адресов,
но было бы удобно иметь возможность указывать адреса с помощью диапазона, например, 192.168.100.1-10.

В этом задании необходимо создать функцию convert_ranges_to_ip_list,
которая конвертирует список IP-адресов в разных форматах в список, где каждый IP-адрес указан отдельно.

Функция ожидает как аргумент список IP-адресов и/или диапазонов IP-адресов.

Элементы списка могут быть в формате:
* 10.1.1.1
* 10.1.1.1-10.1.1.10
* 10.1.1.1-10

Если адрес указан в виде диапазона, надо развернуть диапазон в отдельные адреса, включая последний адрес диапазона.
Для упрощения задачи, можно считать, что в диапазоне всегда меняется только последний октет адреса.

Функция возвращает список IP-адресов.


Например, если передать функции convert_ranges_to_ip_list такой список:
['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']

Функция должна вернуть такой список:
['8.8.4.4', '1.1.1.1', '1.1.1.2', '1.1.1.3', '172.21.41.128',
 '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']

'''

#!/usr/bin/env python3

import subprocess
from check_ip_function import check_ip#использование функции check_ip_function.py

addresses = ['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']

def convert_ranges_to_ip_list(ip_addresses):   
    correct = []#['8.8.4.4']
    notcorrect = []#['1.1.1.1-3','172.21.41.128-172.21.41.132']
    for ip in ip_addresses:
        if check_ip(ip):
            correct.append(ip)
        else:
            notcorrect.append(ip)
    for ip in notcorrect:       
        ip  = ip.split('-')#['1.1.1.1', '3'] или ['172.21.41.128', '172.21.41.132']
        if check_ip(ip[1]):#если ip-адрес типа 172.21.41.132 то:
            ip1 = ip[0].split('.')#['172', '21', '41', '128']
            ip2 = ip[1].split('.')#['172', '21', '41', '132']
            ip3 = ip1[0:3]#['172', '21', '41']
            ip4 = ip2[0:3]#['172', '21', '41']
            ip5 = '.'.join(ip3)+'.'#172.21.41.
            ip6 = '.'.join(ip4)+'.'#172.21.41.
            ip7 = int(ip1[3])#128
            ip8 = int(ip2[3])#132
            list1 = [ip5 + str(i) for i in range(ip7,ip8+1)]#['172.21.41.128', '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']                    
        else:#если ip-адрес не типа 172.21.41.132 то:
            ip1 = ip[0].split('.')#['1', '1', '1', '1']
            ip2 = ip1[0:3]#['1', '1', '1']
            ip3 = '.'.join(ip2)+'.'#1.1.1.
            ip4 = int(ip1[3])#1
            list2 = [ip3 + str(i) for i in range(ip4,int(ip[1])+1)]#['1.1.1.1', '1.1.1.2', '1.1.1.3']
    result = correct + list2 + list1
    return result
final_round1 = convert_ranges_to_ip_list(addresses)#['8.8.4.4', '1.1.1.1', '1.1.1.2', '1.1.1.3', '172.21.41.128', '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']
print(final_round1)
'''
['8.8.4.4', '1.1.1.1', '1.1.1.2', '1.1.1.3', '172.21.41.128', '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']
'''