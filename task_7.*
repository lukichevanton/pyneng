"""Задание 7.1

Аналогично заданию 4.6 обработать строки из файла ospf.txt и вывести информацию по каждой в таком виде:

Protocol:              OSPF
Prefix:                10.0.24.0/24
AD/Metric:             110/41
Next-Hop:              10.0.13.3
Last update:           3d18h
Outbound Interface:    FastEthernet0/0

Ограничение: Все задания надо выполнять используя только пройденные темы."""

"""
f = open('ospf.txt')
RESULT = f.read().replace('O','OSPF').replace('[',' ').replace(']',' ').replace(',',' ').replace('        ',' ').replace('  ',' ').split('\n')

a = RESULT[0].split(' ')
b = RESULT[1].split(' ')
c = RESULT[2].split(' ')
"""

"""1-ый вариант через print
#print('{:20} {:8}'.format('Protocol: ', a[0]))
#print('{:20} {:8}'.format('Prefix: ', a[1]))
#print('{:20} {:8}'.format('AD/Metric: ', a[2]))
#print('{:20} {:8}'.format('Next-Hop: ', a[4]))
#print('{:20} {:8}'.format('Last update: ', a[5]))
#print('{:20} {:8}'.format('Outbound Interface: ', a[6]))
#print()
#print('{:20} {:8}'.format('Protocol: ', b[0]))
#print('{:20} {:8}'.format('Prefix: ', b[1]))
#print('{:20} {:8}'.format('AD/Metric: ', b[2]))
#print('{:20} {:8}'.format('Next-Hop: ', b[4]))
#print('{:20} {:8}'.format('Last update: ', b[5]))
#print('{:20} {:8}'.format('Outbound Interface: ', b[6]))
#print()
etc"""

"""2-ой вариант через if
ospf = [
    'Protocol:', 'Prefix:', 'AD/Metric:', 'Next-Hop:', 'Last update:', 'Outbound Interface:'
]
try:
    for command in ospf:
        if command.endswith('Protocol:'):
            print('{:20} {:8}'.format(command, a[0]))
        elif command.endswith('Prefix:'):
            print('{:20} {:8}'.format(command, a[1]))
        elif command.endswith('AD/Metric:'):
            print('{:20} {:8}'.format(command, a[2]))
        elif command.endswith('Next-Hop:'):
            print('{:20} {:8}'.format(command, a[4]))
        elif command.endswith('Last update:'):
            print('{:20} {:8}'.format(command, a[5]))
        elif command.endswith('Outbound Interface:'):
            print('{:20} {:8}'.format(command, a[6]))
except IndexError:
    print('end of list')

print()

try:
    for command in ospf:
        if command.endswith('Protocol:'):
            print('{:20} {:8}'.format(command, b[0]))
        elif command.endswith('Prefix:'):
            print('{:20} {:8}'.format(command, b[1]))
        elif command.endswith('AD/Metric:'):
            print('{:20} {:8}'.format(command, b[2]))
        elif command.endswith('Next-Hop:'):
            print('{:20} {:8}'.format(command, b[4]))
        elif command.endswith('Last update:'):
            print('{:20} {:8}'.format(command, b[5]))
        elif command.endswith('Outbound Interface:'):
            print('{:20} {:8}'.format(command, b[6]))
except IndexError:
    print('end of list')

print()

try:
    for command in ospf:
        if command.endswith('Protocol:'):
            print('{:20} {:8}'.format(command, c[0]))
        elif command.endswith('Prefix:'):
            print('{:20} {:8}'.format(command, c[1]))
        elif command.endswith('AD/Metric:'):
            print('{:20} {:8}'.format(command, c[2]))
        elif command.endswith('Next-Hop:'):
            print('{:20} {:8}'.format(command, c[4]))
        elif command.endswith('Last update:'):
            print('{:20} {:8}'.format(command, c[5]))
        elif command.endswith('Outbound Interface:'):
            print('{:20} {:8}'.format(command, c[6]))
except IndexError:
    print('end of list')
etc"""


"""Задание 7.2

Создать скрипт, который будет обрабатывать конфигурационный файл config_sw1.txt:
    имя файла передается как аргумент скрипту.

Скрипт должен возвращать на стандартный поток вывода команды из переданного конфигурационного файла, исключая строки, которые начинаются с !.

Между строками не должно быть дополнительного символа перевода строки.

Ограничение: Все задания надо выполнять используя только пройденные темы."""

"""
#from sys import argv
#config = argv[1]

f = open('config_sw1.txt')
#f = open('config')
RESULT = f.read().split('\n')

for command in RESULT:
    if command.startswith('!'):
        continue
    else:
        print(' {}'.format(command))
"""

"""Задание 7.2a

Сделать копию скрипта задания 7.2.

Дополнить скрипт: Скрипт не должен выводить команды, в которых содержатся слова, которые указаны в списке ignore.

Ограничение: Все задания надо выполнять используя только пройденные темы.

ignore = ['duplex', 'alias', 'Current configuration']"""

"""1-ый вариант"""
f = open('config_sw1.txt')
#f = open('config')
RESULT = f.read().split('\n')

ignore = ['duplex', 'alias', 'Current configuration']
#ignore[0] = ' duplex'

for command in RESULT:
    if command.startswith('!'):
        continue
    for item in ignore:
            if item in command:
                break
    else:
        print(' {}'.format(command))

"""2-ой вариант
ignore = ['duplex', 'alias', 'Current configuration']
current_list = list()

with open('config_sw1.txt', 'r') as f:
    for line in f:
        line = line.rstrip()

        # Если пустая строка
        if not line:
            continue

        # Если начинается на '!'
        if line[0] == '!':
            continue

        # Если в строке есть строки из списка игнора
        found_ignore = False
        for item in ignore:
            if item in line:
                found_ignore = True
                break

        if found_ignore:
            continue

        current_list.append(line)


for line in current_list:
    print(line)
"""

"""Задание 7.2b

Дополнить скрипт из задания 7.2a: вместо вывода на стандартный поток вывода, скрипт должен записать полученные строки в файл config_sw1_cleared.txt

При этом, должны быть отфильтрованы строки, которые содержатся в списке ignore. Строки, которые начинаются на ! отфильтровывать не нужно.

Ограничение: Все задания надо выполнять используя только пройденные темы.

ignore = ['duplex', 'alias', 'Current configuration']
"""

f = open('config_sw1.txt')
#f = open('config')
RESULT = f.read().split('\n')

ignore = ['duplex', 'alias', 'Current configuration']
#ignore[0] = ' duplex'

config_sw1_cleared = []

for command in RESULT:
    for item in ignore:
            if item in command:
                break
    else:
        print(' {}'.format(command))
    config_sw1_cleared.append(command)

print(config_sw1_cleared)
